// <auto-generated />
using System;
using JobApplication.Infraestrutura;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobApplication.Migrations
{
    [DbContext(typeof(ConnectionContext))]
    [Migration("20240917122125_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobApplication.Domain.Models.Candidaturas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("data_candidatura")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_candidatura");

                    b.Property<int>("id_candidato")
                        .HasColumnType("integer")
                        .HasColumnName("id_candidato");

                    b.Property<int>("id_vaga")
                        .HasColumnType("integer")
                        .HasColumnName("id_vaga");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.HasKey("id");

                    b.HasIndex("id_candidato");

                    b.HasIndex("id_vaga");

                    b.ToTable("candidaturas");
                });

            modelBuilder.Entity("JobApplication.Domain.Models.Empresas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("cnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("id");

                    b.ToTable("empresas");
                });

            modelBuilder.Entity("JobApplication.Domain.Models.Usuarios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int?>("empresa_id")
                        .HasColumnType("integer")
                        .HasColumnName("empresa_id");

                    b.Property<string>("nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("perfil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("perfil");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("senha");

                    b.HasKey("id");

                    b.HasIndex("empresa_id");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("JobApplication.Domain.Models.Vagas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("data_criacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("data_criacao");

                    b.Property<string>("descricao")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("descricao");

                    b.Property<int>("empresa_id")
                        .HasColumnType("integer")
                        .HasColumnName("empresa_id");

                    b.Property<int>("id_recrutador")
                        .HasColumnType("integer")
                        .HasColumnName("id_recrutador");

                    b.Property<string>("localizacao")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("localizacao");

                    b.Property<string>("requisitos")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requisitos");

                    b.Property<decimal>("salario")
                        .HasMaxLength(10)
                        .HasColumnType("numeric")
                        .HasColumnName("salario");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("titulo");

                    b.HasKey("id");

                    b.HasIndex("empresa_id");

                    b.HasIndex("id_recrutador");

                    b.ToTable("vagas");
                });

            modelBuilder.Entity("JobApplication.Domain.Models.Candidaturas", b =>
                {
                    b.HasOne("JobApplication.Domain.Models.Usuarios", "candidato")
                        .WithMany()
                        .HasForeignKey("id_candidato")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobApplication.Domain.Models.Vagas", "vaga")
                        .WithMany()
                        .HasForeignKey("id_vaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("candidato");

                    b.Navigation("vaga");
                });

            modelBuilder.Entity("JobApplication.Domain.Models.Usuarios", b =>
                {
                    b.HasOne("JobApplication.Domain.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("empresa_id");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("JobApplication.Domain.Models.Vagas", b =>
                {
                    b.HasOne("JobApplication.Domain.Models.Empresas", "Empresa")
                        .WithMany()
                        .HasForeignKey("empresa_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobApplication.Domain.Models.Usuarios", "recrutador")
                        .WithMany()
                        .HasForeignKey("id_recrutador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");

                    b.Navigation("recrutador");
                });
#pragma warning restore 612, 618
        }
    }
}
